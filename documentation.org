#+BIND: org-export-publishing-directory "doc"
#+PROPERTY: dir doc

* My backup approach

  My backup solution is based on tarsnap. The idea is to start the
  tarsnap client each day via (anacron). As my uplink is pretty slow
  (DSL) and sometimes flaky, a snapshot is created every 300MB (the
  tarsnap documentation recommends 1GB as minimum size).

  There are other items that the backup wrapper will try to take care
  of:

  - Handle loss of network connection gracefully
  - Start tarsnap once a day, if no session is already running
  - Stop or suspend the tarsnap process if the network connection changes from
    wlan to UMTS, as my UMTS bandwith / day is limited and expensive
  - Stop or suspend the tarsnap process when running on laptop battery
  - Start or resume the tarsnap process when an external power supply
    is connected
  - Start or resume the tarsnap process when back on wlan or lan connection
  - Insert a snapshot before going to hibernate / shutting down the
    computer
  - To prevent runaway tarsnap sessions to waste all bandwith, limit
    the bandwith per session

** First running version
   Copy the backup script to /etc/cron.daily and make it executable.
** System state machine

#+BEGIN_SRC dot :file images/state-machine-dot.png :exports results
digraph {
 INIT_HIBERNATE [label="INIT_HIBERNATE\nentry / emit sigusr2\nexit / wait 5s"];
 RUNNING -> SNAPSHOT [label="snapshot_threshold |\nsigusr2"];
 SNAPSHOT -> RUNNING;
 STOPPED -> RUNNING [label="(ana)cron |\nsys_startup |\nmanual_startup"];
 RUNNING -> STOPPED [label="bw_limit |\nsys_shutdown"];
 RUNNING -> INIT_HIBERNATE [label="sys_hibernate"];
 SNAPSHOT -> INIT_HIBERNATE [label="sys_hibernate"];
 INIT_HIBERNATE -> HIBERNATE;
 HIBERNATE -> RUNNING [label="sys_resume"];
}
#+END_SRC

#+RESULTS:

** Useful Commands
*** List all archives

#+begin_src sh
  sudo tarsnap --keyfile /root/tarsnap.key --list-archives
#+end_src

*** Create 2GB backup archive

#+begin_src sh
  sudo tarsnap -c -f "mybackup-$(date +%Y%m%d%H%M%S)" --cachedir /home/flo/.tarsnap-cache --keyfile /root/tarsnap.key  -v -X tarsnap-excludes.txt --print-stats  --checkpoint-bytes 300000000 /home/flo/
#+end_src

*** Create backup 

#+begin_src sh
  sudo tarsnap -c -f "mybackup-$(date +%Y%m%d%H%M%S)" --cachedir /home/flo/.tarsnap-cache --keyfile /root/tarsnap.key  -v -X tarsnap-excludes.txt --print-stats --maxbw 2G --checkpoint-bytes 300000000 /home/flo/ 
#+end_src

*** Recover last archive (usually automatic on next archive creation)

#+begin_src sh
  sudo tarsnap --recover -f mybackup-20141208 --cachedir /home/flo/.tarsnap-cache --keyfile /root/tarsnap.key 
#+end_src

*** Print current operation on stderr

#+begin_src sh
  sudo kill -s SIGUSR1 $(pidof tarsnap)
#+end_src

*** generate checkpoint

#+begin_src sh
  sudo kill -s SIGUSR2 $(pidof tarsnap)
#+end_src


*** Check backup size using du and considering tarsnap-excludes.txt

#+begin_src sh
  du -X /home/flo/tarsnap-excludes.txt --max-depth=1  /home/flo | sort -n
#+end_src

*** Quit, create snapshot and wait for completion

#+begin_src sh
  sudo kill -s SIGQUIT $(pidof tarsnap) && while pidof tarsnap ; do sleep 5 ; done
#+end_src

*** Check whether power supply is battery or AC adapter

#+begin_src sh
  upower -i $(upower -e | grep 'AC') | grep "online"
#+end_src

returns onlie: no if the computer is running on battery.
http://askubuntu.com/questions/69556/how-to-check-battery-status-using-terminal

*** Check the network connection
http://askubuntu.com/questions/361532/how-to-find-available-wireless-networks?rq=1
http://askubuntu.com/questions/117065/how-do-i-find-out-the-name-of-the-ssid-im-connected-to-from-the-command-line
http://askubuntu.com/questions/405508/how-to-find-name-of-currently-active-network-interface
*** Execute script on shutdown
http://askubuntu.com/questions/416299/execute-command-before-shutdown-reboot
*** Run script on change of network connection
http://ubuntuforums.org/showthread.php?t=1083549
